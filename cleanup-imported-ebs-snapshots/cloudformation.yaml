AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [lambda.amazonaws.com] }
            Action: [sts:AssumeRole]
      Policies:
        - PolicyName: EBSSnashotsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [ec2:DescribeSnapshots]
                Resource: '*'
              - Effect: Allow
                Action: [ec2:DeleteSnapshot]
                Resource: '*'
                Condition:
                  StringLike:
                    aws:ResourceTag/elastio:imported-to-rp: '*'
              - Effect: Allow
                # We don't give the lambda a permission to create log groups
                # because we pre-create the log group ourselves
                Action: [logs:CreateLogStream, logs:PutLogEvents]
                Resource: arn:aws:logs:*:*:*

  # The default log group that AWS Lambda creates has retention disabled.
  # We don't want to store logs indefinitely, so we create a custom log group with
  # retention enabled.
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/elastio-cleanup-imported-ebs-snapshots
      # This lambda does destructive operations, so we want to keep the logs for a long time
      # to be safe and to be able to debug any issues if they happen.
      RetentionInDays: 180

  Lambda:
    Type: AWS::Serverless::Function
    # We want to create a custom log group with retention enabled first,
    # and only after that deploy the lambda.
    DependsOn: LambdaLogGroup
    Properties:
      FunctionName: elastio-cleanup-imported-ebs-snapshots
      Description: 'A Lambda function to delete EBS snapshots tagged with elastio:imported-to-rp'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Schedule:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: rate(1 hour)

      # Change the code if the lambda in the `src/index.ts` file and then run `npm run build`.
      # After that, copy the content of the `dist/index.js` file and paste it here.
      InlineCode: |
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.handler = void 0;
        const client_ec2_1 = require("@aws-sdk/client-ec2");
        const TAG_TO_DELETE_BY = 'elastio:imported-to-rp';
        const ec2 = new client_ec2_1.EC2Client({});
        /**
        * A handler that is invoked periodically based on an AWS Sheduler shedule
        * and cleans up EBS snapshots that were already imported to Elastio.
        *
        * @param {AWS.CloudWatchEvent.Event} event
        */
        async function handler() {
            const paginator = (0, client_ec2_1.paginateDescribeSnapshots)({
                client: ec2,
                pageSize: 1000,
            }, {
                OwnerIds: ['self'],
                Filters: [{ Name: 'tag-key', Values: [TAG_TO_DELETE_BY] }]
            });
            for await (const page of paginator) {
                const snapshots = (page.Snapshots ?? []);
                console.log(`Discovered ${snapshots.length} snapshots to cleanup`);
                await Promise.all(snapshots.map(deleteSnapshot));
                console.log(`Done processing ${snapshots.length} snapshots`);
            }
        }
        exports.handler = handler;
        async function deleteSnapshot(snapshot) {
            const snapshotId = snapshot.SnapshotId;
            if (snapshotId == null) {
                console.error("Found a snapshot without a SnapshotId. Skipping it.", snapshot);
                return;
            }
            const tag = snapshot.Tags?.find(tag => tag.Key === TAG_TO_DELETE_BY);
            if (tag == null) {
                // It should be a bug if we get here.
                // We must filter by this tag in the DescribeSnapshots query.
                console.error(`Found a snapshot without the tag '${TAG_TO_DELETE_BY}'. Skipping it.`, snapshot);
                return;
            }
            console.log(`Deleting the EBS snapshot (${TAG_TO_DELETE_BY}=${tag.Value}) ${snapshotId}`);
            await ec2.send(new client_ec2_1.DeleteSnapshotCommand({ SnapshotId: snapshotId }));
        }
