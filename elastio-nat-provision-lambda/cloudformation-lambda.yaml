# yaml-language-server: $schema=https://raw.githubusercontent.com/awslabs/goformation/master/schema/cloudformation.schema.json
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Provisions a NAT Gateway when Elastio worker instances are running, and de-provisions the gateway when
  the instances are not running.
Parameters:
  DeleteQuiescentPeriodSeconds:
    Type: Number
    Default: 300
    MinValue: 0
    Description: How long to wait for no new EC2 instances to appear before deleting the NAT Gateway

  CleanupScheduleCron:
    Type: String
    Default: '0 1 * * ? *'
    Description: >
      A cron expression that defines when and how often to run a cleanup routine.
      The syntax corresponds to the AWS Scheduler's cron expression syntax:
      https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html#cron-based

  NatGatewayScope:
    Type: String
    Default: 'vpc'
    AllowedValues: ['vpc', 'az']
    Description: >
      The scope of the NAT Gateway deployment. The default value of 'vpc' means
      only one NAT gateway will be deployed per VPC. This results in cross-AZ
      traffic, but keeps the number of NAT gateways to a minimum.

      If set to 'az', only one NAT Gateway will be deployed per VPC/AZ. This
      results in intra-AZ traffic, but increases the number of NAT gateways.

  NatGatewayStackPrefix:
    Type: String
    Default: elastio-nat-gateway-
    MinLength: 1
    Description: Prefix of the name of the NAT Gateway CFN stack. The name will be <prefix><public-subnet-id>

  LambdaMemorySize:
    Type: Number
    Default: 512
    MinValue: 128
    MaxValue: 10240
    Description: Amount of memory allocated to the lambda function

  LambdaTimeout:
    Type: Number
    Default: 600
    MinValue: 10
    MaxValue: 900
    Description: Max amount of time the lambda function can run

  LambdaLogsRetention:
    Type: String
    Default: '7'
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, 3653]
    Description: The number of days to retain the log events in the lambda's log group

  LambdaTracing:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: Enable AWS X-Ray tracing for the lambda function

  EncryptWithKms:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
    Description: Add a custom prefix to names of all IAM resources deployed by this stack

  IamResourceNamesPrefix:
    Type: String
    Default: ''
    Description: Prefix for the IAM resources created by this stack

  IamResourceNamesSuffix:
    Type: String
    Default: ''
    Description: Add a custom suffix to names of all IAM resources deployed by this stack

Conditions:
  LambdaTracingCondition: !Equals [!Ref LambdaTracing, 'true']
  EncryptWithKmsCondition: !Equals [!Ref EncryptWithKms, 'true']

Resources:
  # The default log group that AWS Lambda creates has retention disabled.
  # We don't want to store logs indefinitely, so we create a custom log group with
  # retention enabled.
  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/elastio-nat-gateway-provision
      RetentionInDays: !Ref LambdaLogsRetention
      Tags:
        - Key: elastio:resource
          Value: 'true'

  lambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Name: !Join
        - ""
        - - !Ref IamResourceNamesPrefix
          - ElastioNatProvisionLambda
          - "-"
          # This stack can be deployed in many regions, so we need to include the region in the name
          # to avoid name conflicts between regions.
          - !Ref AWS::Region
          - !Ref IamResourceNamesSuffix

      Tags:
        - Key: elastio:resource
          Value: 'true'

      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !If
          - LambdaTracingCondition
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
          - !Ref AWS::NoValue

      Policies:
        - PolicyName: ElastioNatProvisionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:CreateChangeSet
                  - ec2:AllocateAddress
                  - ec2:CreateNatGateway
                  - ec2:CreateRoute
                  - ec2:CreateTags
                  - ec2:DeleteRoute
                  - ec2:DescribeAddresses
                  - ec2:DescribeInstances
                  - ec2:DescribeNatGateways
                  - ec2:DescribeRouteTables
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - ec2:ReleaseAddress
                  - ecs:ListClusters
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                  - states:DescribeExecution
                  - states:ListExecutions
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                  - ec2:DeleteNatGateway
                Resource: '*'
                Condition:
                  StringLike:
                    aws:ResourceTag/elastio:resource: '*'
              - Effect: Allow
                # We don't give the lambda a permission to create log groups
                # because we pre-create the log group ourselves
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  lambdaInvocationRole:
    Type: AWS::IAM::Role
    Properties:
      Name: !Join
        - ""
        - - !Ref IamResourceNamesPrefix
          - ElastioNatProvisionLambdaInvocation
          - "-"
          # This stack can be deployed in many regions, so we need to include the region in the name
          # to avoid name conflicts between regions.
          - !Ref AWS::Region
          - !Ref IamResourceNamesSuffix

      Tags:
        - Key: elastio:resource
          Value: 'true'

      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
                - scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt lambdaFunction.Arn

  stateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/vendedlogs/states/elastio-nat-gateway-provision
      RetentionInDays: 7
      Tags:
        - Key: elastio:resource
          Value: 'true'

  stateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Name: !Join
        - ""
        - - !Ref IamResourceNamesPrefix
          - ElastioNatProvisionStateMachineExecution
          - "-"
          # This stack can be deployed in many regions, so we need to include the region in the name
          # to avoid name conflicts between regions.
          - !Ref AWS::Region
          - !Ref IamResourceNamesSuffix

      Tags:
        - Key: elastio:resource
          Value: 'true'

      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StartStateMachinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt natGatewayCleanupStateMachine.Arn

  kmsEncryptionKey:
    Condition: EncryptWithKmsCondition
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for Elastio NAT Gateway provisioner stack
      EnableKeyRotation: true
      PendingWindowInDays: 7
      Tags:
        - Key: elastio:resource
          Value: 'true'
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: kms:*
            Resource: '*'

  kmsEncryptionKeyAlias:
    Condition: EncryptWithKmsCondition
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/elastio-nat-gateway-provisioner-encryption
      TargetKeyId: !Ref kmsEncryptionKey

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: elastio:resource
          Value: 'true'

      FunctionName: elastio-nat-gateway-provision
      Handler: lambda.lambda_handler
      Runtime: python3.12
      MemorySize: !Ref LambdaMemorySize
      Timeout: !Ref LambdaTimeout
      Role: !GetAtt lambdaRole.Arn

      TracingConfig: !If
        - LambdaTracingCondition
        - Mode: Active
        - !Ref AWS::NoValue

      KmsKeyArn: !If
        - EncryptWithKmsCondition
        - !GetAtt kmsEncryptionKey.Arn
        - !Ref AWS::NoValue

      Environment:
        Variables:
          NAT_GATEWAY_SCOPE: !Ref NatGatewayScope
          NAT_CFN_PREFIX: !Ref NatGatewayStackPrefix
          NAT_CFN_TEMPLATE_URL: !Sub https://{{S3_BUCKET_PREFIX}}-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/{{S3_KEY_PREFIX}}/{{VERSION}}/cloudformation-nat.yaml
          STATE_MACHINE_ARN: !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:elastio-nat-gateway-provision-state-machine'
      Code:
        S3Bucket: !Sub '{{S3_BUCKET_PREFIX}}-${AWS::Region}'
        S3Key: {{S3_KEY_PREFIX}}/{{VERSION}}/lambda.zip

  pendingEc2InstancesSubscription:
    Type: AWS::Events::Rule
    Properties:
      Description: Track pending EC2 instances for Elastio NAT Gateway provisioner lambda
      EventPattern:
        account: [!Ref AWS::AccountId]
        region: [!Ref AWS::Region]
        source: [aws.ec2]
        detail-type: [EC2 Instance State-change Notification]
        detail:
          state:
            - pending
      Targets:
        - Arn: !GetAtt lambdaFunction.Arn
          Id: event-handler

  pendingEc2InstancesLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref lambdaFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt pendingEc2InstancesSubscription.Arn

  stoppedEc2InstancesSubscription:
    Type: AWS::Events::Rule
    Properties:
      Description: Track stopped and terminated EC2 instances for Elastio NAT Gateway provisioner lambda
      EventPattern:
        account: [!Ref AWS::AccountId]
        region: [!Ref AWS::Region]
        source: [aws.ec2]
        detail-type: [EC2 Instance State-change Notification]
        detail:
          state:
            - stopped
            - terminated
      Targets:
        - Arn: !GetAtt natGatewayCleanupStateMachine.Arn
          Id: event-handler
          RoleArn: !GetAtt stateMachineExecutionRole.Arn

  provisioningEcsTasksSubscription:
    Type: AWS::Events::Rule
    Properties:
      Description: Track provisioning Fargate ECS tasks for Elastio NAT Gateway provisioner lambda
      EventPattern:
        account: [!Ref AWS::AccountId]
        region: [!Ref AWS::Region]
        source: [aws.ecs]
        detail-type: [ECS Task State Change]
        detail:
          lastStatus: [PROVISIONING]
          # We are interested only in `FARGATE`, because `EC2` is covered by the EC2 instance events.
          launchType: [FARGATE]
          containers:
            image:
              # Any container image from any elastio ECR registry will trigger the lambda.
              # This pattern includes `elastio-development` registry as well for testing.
              - prefix: public.ecr.aws/elastio
      Targets:
        - Arn: !GetAtt lambdaFunction.Arn
          Id: event-handler

  provisioningEcsTasksLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref lambdaFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt provisioningEcsTasksSubscription.Arn

  stoppedEcsTasksSubscription:
    Type: AWS::Events::Rule
    Properties:
      Description: Track stopped Fargate ECS tasks for Elastio NAT Gateway provisioner lambda
      EventPattern:
        account: [!Ref AWS::AccountId]
        region: [!Ref AWS::Region]
        source: [aws.ecs]
        detail-type: [ECS Task State Change]
        detail:
          lastStatus: [STOPPED]
          # We are interested only in `FARGATE`, because `EC2` is covered by the EC2 instance events.
          launchType: [FARGATE]
          containers:
            image:
              # Any container image from any elastio ECR registry will trigger the lambda.
              # This pattern includes `elastio-development` registry as well for testing.
              - prefix: public.ecr.aws/elastio
      Targets:
        - Arn: !GetAtt natGatewayCleanupStateMachine.Arn
          Id: event-handler
          RoleArn: !GetAtt stateMachineExecutionRole.Arn

  natGatewayCleanupStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      Tags:
        - Key: elastio:resource
          Value: 'true'
      StateMachineName: elastio-nat-gateway-provision
      RoleArn: !GetAtt lambdaInvocationRole.Arn

      Definition:
        StartAt: Wait
        States:
          Wait:
            Type: Wait
            Seconds: !Ref DeleteQuiescentPeriodSeconds
            Next: InvokeLambda
          InvokeLambda:
            Type: Task
            Resource: !GetAtt lambdaFunction.Arn
            End: true

  cleanupSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Description: A schedule to cleanup unnecessary deployed NAT Gateways
      ScheduleExpression: !Sub cron(${CleanupScheduleCron})
      FlexibleTimeWindow:
        Mode: 'OFF'
      State: ENABLED
      Target:
        Arn: !GetAtt lambdaFunction.Arn
        RoleArn: !GetAtt lambdaInvocationRole.Arn
        Input: '{ "elastio_scheduled_cleanup": true }'

Outputs:
  templateVersion:
    Value: {{VERSION}}
